// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: crypto.proto

package crypro

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageStreamer_StreamMessages_FullMethodName = "/crypto.MessageStreamer/StreamMessages"
)

// MessageStreamerClient is the client API for MessageStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageStreamerClient interface {
	// Client streaming: client sends many CryptoUpdateList messages, server responds once
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CryptoUpdateList, emptypb.Empty], error)
}

type messageStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageStreamerClient(cc grpc.ClientConnInterface) MessageStreamerClient {
	return &messageStreamerClient{cc}
}

func (c *messageStreamerClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CryptoUpdateList, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageStreamer_ServiceDesc.Streams[0], MessageStreamer_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CryptoUpdateList, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageStreamer_StreamMessagesClient = grpc.ClientStreamingClient[CryptoUpdateList, emptypb.Empty]

// MessageStreamerServer is the server API for MessageStreamer service.
// All implementations must embed UnimplementedMessageStreamerServer
// for forward compatibility.
type MessageStreamerServer interface {
	// Client streaming: client sends many CryptoUpdateList messages, server responds once
	StreamMessages(grpc.ClientStreamingServer[CryptoUpdateList, emptypb.Empty]) error
	mustEmbedUnimplementedMessageStreamerServer()
}

// UnimplementedMessageStreamerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageStreamerServer struct{}

func (UnimplementedMessageStreamerServer) StreamMessages(grpc.ClientStreamingServer[CryptoUpdateList, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessageStreamerServer) mustEmbedUnimplementedMessageStreamerServer() {}
func (UnimplementedMessageStreamerServer) testEmbeddedByValue()                         {}

// UnsafeMessageStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageStreamerServer will
// result in compilation errors.
type UnsafeMessageStreamerServer interface {
	mustEmbedUnimplementedMessageStreamerServer()
}

func RegisterMessageStreamerServer(s grpc.ServiceRegistrar, srv MessageStreamerServer) {
	// If the following call pancis, it indicates UnimplementedMessageStreamerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageStreamer_ServiceDesc, srv)
}

func _MessageStreamer_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageStreamerServer).StreamMessages(&grpc.GenericServerStream[CryptoUpdateList, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageStreamer_StreamMessagesServer = grpc.ClientStreamingServer[CryptoUpdateList, emptypb.Empty]

// MessageStreamer_ServiceDesc is the grpc.ServiceDesc for MessageStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto.MessageStreamer",
	HandlerType: (*MessageStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessageStreamer_StreamMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "crypto.proto",
}
